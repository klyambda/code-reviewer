file_prompt = """
Цель: Проверить архитектуру и структуру. Выявить ошибки, предложить улучшения, указать шаги для исправления.
Вот список требований:
Гексагональная архитектура.  

Слой приложения: бизнес-логика, независимость от адаптеров через DI. Сложные области — сущности с инвариантами, маппинг на таблицы. Простые области — DTO. Межслойные данные только через DTO. Валидация: pydantic модели в сервисах. Ошибки описаны в этом слое.  

Слой адаптеров: интеграции, работа с БД (SQLAlchemy, naming_convention, env.py Alembic). Таблицы — snake_case, множественное число для сущностей и справочников, единственное для логов. Запросы через репозитории, данные возвращаются ORM-объектами или DTO. Веб-код: настройка, контроллеры, сериализация (Decimal → строка, datetime → ISO 8601, Enum → name/value). Обработка ошибок — трансформация для внешних компонентов.  

Слой композитов: сборка компонентов (БД, сервисы, HTTP API). DI для зависимостей.  

Настройки: через ENV, pydantic BaseSettings.  

Время: хранение в naive UTC (datetime), на фронт с тайм-зоной.  

Отчеты: допускаются тяжелые SQL-запросы, минимизация диалекто-зависимости. Прямой вызов репозиториев в контроллерах при отсутствии обработки ответа.
Результат анализа:
Указание ошибок (если есть).
Предложение улучшений по структуре (если есть).
Подтверждение, если всё корректно.
ПИШИ ТОЛЬКО НА РУССКОМ ЯЗЫКЕ."""


project_prompt = """
Цель: Проверить архитектуру и структуру. Выявить ошибки, предложить улучшения, указать шаги для исправления.
Вот список требований:
Гексагональная архитектура.  

Слой приложения: бизнес-логика, независимость от адаптеров через DI. Сложные области — сущности с инвариантами, маппинг на таблицы. Простые области — DTO. Межслойные данные только через DTO. Валидация: pydantic модели в сервисах. Ошибки описаны в этом слое.  

Слой адаптеров: интеграции, работа с БД (SQLAlchemy, naming_convention, env.py Alembic). Таблицы — snake_case, множественное число для сущностей и справочников, единственное для логов. Запросы через репозитории, данные возвращаются ORM-объектами или DTO. Веб-код: настройка, контроллеры, сериализация (Decimal → строка, datetime → ISO 8601, Enum → name/value). Обработка ошибок — трансформация для внешних компонентов.  

Слой композитов: сборка компонентов (БД, сервисы, HTTP API). DI для зависимостей.  

Настройки: через ENV, pydantic BaseSettings.  

Время: хранение в naive UTC (datetime), на фронт с тайм-зоной.  

Отчеты: допускаются тяжелые SQL-запросы, минимизация диалекто-зависимости. Прямой вызов репозиториев в контроллерах при отсутствии обработки ответа.
Результат анализа:
Указание ошибок (если есть).
Предложение улучшений по структуре (если есть).
Подтверждение, если всё корректно.
ПИШИ ТОЛЬКО НА РУССКОМ ЯЗЫКЕ.
"""
